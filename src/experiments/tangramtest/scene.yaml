cameras:
    camera1:
        type: perspective

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1

sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: mapzen-tDHBHDp
        max_zoom: 16

layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#ddeeee'

    landuse:
        data: { source: mapzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#aaffaa'

    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: '#88bbee'

    roads:
        data: { source: mapzen }
        filter:
            not: { kind: [path, rail, ferry] }
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: gray
                width: 8
                cap: round
        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: '#cc6666'
                    width: 12
                    outline:
                        color: grey
                        width: 1.5
        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: lightgrey
                    width: 5

    buildings:
        data: { source: mapzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: |
                    function () {
                        var h = feature.height || 20;
                        h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                        h = Math.max(h, .4); // min brightness: .4
                        if (feature.kind === 'building') {
                            if (feature.kind_detail === 'commercial' || feature.kind_detail === 'office' || feature.kind_detail === 'bank' || feature.kind_detail === 'mall') { //Heavy commercial
                                return [0.6, 0.6, 1.0];
                            }
                            else if (feature.kind_detail === 'restaurant' || 
                                    feature.kind_detail === 'shop' || 
                                    feature.kind_detail === 'supermarket' || 
                                    feature.kind_detail === 'store' || 
                                    feature.kind_detail === 'service' || 
                                    feature.kind_detail === 'retail' ||
                                    feature.kind_detail === 'pub') { //Light commercial
                                return [0.3, 0.3, 0.7];
                            }
                            else if (feature.kind_detail === 'residential' || feature.kind_detail === 'house') {
                                return [0.6, 1.0, 0.6];
                            }
                            else if (feature.kind_detail === 'apartments' || feature.kind_detail === 'hotel' || feature.kind_detail === 'duplex') {
                                return [0.3, 0.7, 0.3];
                            }
                            else if (feature.kind_detail === 'mixed_use') {
                                return [0.5, 0, 0];
                            }
                            else if (feature.kind_detail === 'civic' || feature.kind_detail === 'government' || feature.kind_detail === 'administrative') {
                                return [0.5, 0, 0];
                            }
                        }
                        return [h, h, h];
                    }
        3d-buildings:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    extrude: function () { return feature.height > 20 || $zoom >= 16; }
